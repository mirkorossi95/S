gg.require('81.0') function A() if f<2 then gg.clearList() gg.clearResults() gg.setRanges(gg.REGION_C_HEAP|gg.REGION_C_ALLOC) w=0 for j=0,9 do k=1 repeat if k>1 then gg.toast('Riprova') gg.sleep(3000) else k=2 end if j<1 then p=gg.prompt({'Tempo attuale (solo secondi), 0 per annullare','Tempo obiettivo (millisecondi opzionali), 0 per annullare'},{n,t},{'number','number'}) if p and tonumber(p[1]) and tonumber(p[2]) then n,t=p[1]+0,p[2]+0 if t<20 or t>180 or n<10 then gg.toast('Annullato') return end end end until p and tonumber(p[1]) and tonumber(p[2]) x=(n-1)*1000000 y=x+2000000 x=x..'~'..y if j<1 then gg.searchNumber(x,gg.TYPE_DWORD) else gg.refineNumber(x,gg.TYPE_DWORD) end v=gg.getResultsCount() if w==v then break else w=v end if j<9 then gg.toast(v) gg.sleep(1000) n=n+1 end end if v<1 or v>50 then z={} gg.alert('Errore '..v..' valori') else z=gg.getResults(v) gg.toast('Bloccati '..v..' valori') f=2 end else z=gg.getListItems() gg.toast('Modificato') end if t==math.floor(t) then r='0.'..math.random(1,750) t=t+r end for _,u in ipairs(z) do u.value=t*1000000 u.freeze=true end t=math.floor(t) gg.addListItems(z) end function B() if f<2 then p=gg.prompt({"Valore dell'accelerazione/manovrabilità/raggio di curvatura, annulla per tornare indietro [25;60]","Non chiedere più"},{m*100,true},{'number','checkbox'}) if not p then gg.toast('Annullato') return end m=p[1]..'.0' m=m/100 a=1 if p[2]==true then b=1 gg.toast('Pronto per INFINITE gare') else gg.toast('Pronto per UNA gara') end else for _,u in ipairs(gg.getListItems()) do u.freeze=false end gg.clearList() gg.clearResults() gg.toast('Sbloccato') f=1 end end function C() gg.setVisible(true) os.exit() end n,t,f,m,a,b=0,0,1,0.3,0,0 while 1 do if gg.isVisible(true) then gg.setVisible(false) if a<1 and b<1 then i,o={{'⏱️Tempo⏱️','🚀Accelerazione/manovrabilità/raggio di curvatura🚀','⛔Esci⛔'},{'✐Modifica rapida✐','⚡Sblocca⚡'}},{A,B,C} c=gg.choice(i[f]) if c then o[c]() end else gg.clearResults() gg.setRanges(gg.REGION_C_ALLOC) gg.searchNumber('0.23~0.27;-0.0006~0;-0.0006~0;0.3::13',gg.TYPE_FLOAT) gg.refineNumber('0.23~0.27',gg.TYPE_FLOAT) gg.getResults(gg.getResultsCount()) z=gg.editAll(m,gg.TYPE_FLOAT) gg.toast('Modificati '..z..' valori') a=0 gg.clearResults() end end end